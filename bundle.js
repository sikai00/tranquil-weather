(()=>{"use strict";var e={5426:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(7537),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@200;400;700&display=swap);"]),i.push([e.id,"body {\n  background-size: cover;\n  background-position: 0 30%;\n  background-repeat: no-repeat;\n}\n\nbody > * {\n  color: white;\n  font-family: 'Nunito Sans', sans-serif;\n  margin-bottom: 10px;\n}\n\n.weather-container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.description {\n  padding-right: 10px;\n}\n\n.temperature-container {\n  font-weight: bold;\n  background-color: transparent;\n  border: 0;\n}\n\n.app {\n  display: flex;\n  justify-content: space-between;\n  \n}\n\n.main {\n  font-size: 3.5rem;\n  margin-left: 100px;\n  margin-top: 100px;\n}\n\n.side {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-right: 100px;\n  margin-top: 100px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 20px;\n}\n\n.humidity-container,\n.pressure-container,\n.wind-container,\n.cloudiness-container {\n  display: flex;\n  align-items: center;\n}\n\n.location-form input[type='text']{\n  padding: 0;\n  margin: 0;\n  background-color: transparent;\n  color: white;\n  outline: 0;\n  border: 0;\n  font-size: inherit;\n  width: 60%;\n}\n\n.location-form button[type='button'] {\n  cursor: pointer;\n  background-color: transparent;\n  border: 0;\n  outline: 0;\n}\n\n.wind-container {\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.wind-container > div {\n  display: flex;\n  align-items: center;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,sBAAsB;EACtB,0BAA0B;EAC1B,4BAA4B;AAC9B;;AAEA;EACE,YAAY;EACZ,sCAAsC;EACtC,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,SAAS;AACX;;AAEA;EACE,aAAa;EACb,8BAA8B;;AAEhC;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,mBAAmB;EACnB,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,aAAa;AACf;;AAEA;;;;EAIE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,UAAU;EACV,SAAS;EACT,6BAA6B;EAC7B,YAAY;EACZ,UAAU;EACV,SAAS;EACT,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,eAAe;EACf,6BAA6B;EAC7B,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@200;400;700&display=swap');\n\nbody {\n  background-size: cover;\n  background-position: 0 30%;\n  background-repeat: no-repeat;\n}\n\nbody > * {\n  color: white;\n  font-family: 'Nunito Sans', sans-serif;\n  margin-bottom: 10px;\n}\n\n.weather-container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.description {\n  padding-right: 10px;\n}\n\n.temperature-container {\n  font-weight: bold;\n  background-color: transparent;\n  border: 0;\n}\n\n.app {\n  display: flex;\n  justify-content: space-between;\n  \n}\n\n.main {\n  font-size: 3.5rem;\n  margin-left: 100px;\n  margin-top: 100px;\n}\n\n.side {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-right: 100px;\n  margin-top: 100px;\n  display: flex;\n  flex-direction: column;\n  row-gap: 20px;\n}\n\n.humidity-container,\n.pressure-container,\n.wind-container,\n.cloudiness-container {\n  display: flex;\n  align-items: center;\n}\n\n.location-form input[type='text']{\n  padding: 0;\n  margin: 0;\n  background-color: transparent;\n  color: white;\n  outline: 0;\n  border: 0;\n  font-size: inherit;\n  width: 60%;\n}\n\n.location-form button[type='button'] {\n  cursor: pointer;\n  background-color: transparent;\n  border: 0;\n  outline: 0;\n}\n\n.wind-container {\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.wind-container > div {\n  display: flex;\n  align-items: center;\n}\n"],sourceRoot:""}]);const u=i},3645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var u=0;u<this.length;u++){var l=this[u][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},7537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},7394:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r},e.exports=t.default},8609:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},e.exports=t.default},6420:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)({},e)};var r,a=(r=n(8609))&&r.__esModule?r:{default:r};e.exports=t.default},7561:(e,t,n)=>{var r;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=((r=n(2512))&&r.__esModule?r:{default:r}).default;t.default=a,e.exports=t.default},8729:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDefaultOptions=function(){return n},t.setDefaultOptions=function(e){n=e};var n={}},7100:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=c(n(1603)),a=c(n(1354)),o=c(n(1370)),i=c(n(623)),u=c(n(6226)),l=c(n(7394)),d=c(n(2699));function c(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+(0,l.default)(o,2)}function f(e,t){return e%60==0?(e>0?"-":"+")+(0,l.default)(Math.abs(e)/60,2):h(e,t)}function h(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+(0,l.default)(Math.floor(a/60),2)+n+(0,l.default)(a%60,2)}var g={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return d.default.y(e,t)},Y:function(e,t,n,r){var a=(0,u.default)(e,r),o=a>0?a:1-a;if("YY"===t){var i=o%100;return(0,l.default)(i,2)}return"Yo"===t?n.ordinalNumber(o,{unit:"year"}):(0,l.default)(o,t.length)},R:function(e,t){var n=(0,o.default)(e);return(0,l.default)(n,t.length)},u:function(e,t){var n=e.getUTCFullYear();return(0,l.default)(n,t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return(0,l.default)(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return(0,l.default)(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return d.default.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return(0,l.default)(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=(0,i.default)(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):(0,l.default)(a,t.length)},I:function(e,t,n){var r=(0,a.default)(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):(0,l.default)(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):d.default.d(e,t)},D:function(e,t,n){var a=(0,r.default)(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):(0,l.default)(a,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return(0,l.default)(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return(0,l.default)(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return(0,l.default)(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return d.default.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):d.default.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):(0,l.default)(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):(0,l.default)(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):d.default.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):d.default.s(e,t)},S:function(e,t){return d.default.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return f(a);case"XXXX":case"XX":return h(a);default:return h(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return f(a);case"xxxx":case"xx":return h(a);default:return h(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+s(a,":");default:return"GMT"+h(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+s(a,":");default:return"GMT"+h(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e,o=Math.floor(a.getTime()/1e3);return(0,l.default)(o,t.length)},T:function(e,t,n,r){var a=(r._originalDate||e).getTime();return(0,l.default)(a,t.length)}};t.default=g,e.exports=t.default},2699:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(7394))&&r.__esModule?r:{default:r},o={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return(0,a.default)("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):(0,a.default)(n+1,2)},d:function(e,t){return(0,a.default)(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return(0,a.default)(e.getUTCHours()%12||12,t.length)},H:function(e,t){return(0,a.default)(e.getUTCHours(),t.length)},m:function(e,t){return(0,a.default)(e.getUTCMinutes(),t.length)},s:function(e,t){return(0,a.default)(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds(),o=Math.floor(r*Math.pow(10,n-3));return(0,a.default)(o,t.length)}};t.default=o,e.exports=t.default},5209:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},r=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},a={p:r,P:function(e,t){var a,o=e.match(/(P+)(p+)?/)||[],i=o[1],u=o[2];if(!u)return n(e,t);switch(i){case"P":a=t.dateTime({width:"short"});break;case"PP":a=t.dateTime({width:"medium"});break;case"PPP":a=t.dateTime({width:"long"});break;default:a=t.dateTime({width:"full"})}return a.replace("{{date}}",n(i,t)).replace("{{time}}",r(u,t))}};t.default=a,e.exports=t.default},3561:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()},e.exports=t.default},1603:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(1,arguments);var t=(0,r.default)(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=t.getTime(),u=n-o;return Math.floor(u/i)+1};var r=o(n(1171)),a=o(n(8734));function o(e){return e&&e.__esModule?e:{default:e}}var i=864e5;e.exports=t.default},1354:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,i.default)(1,arguments);var t=(0,r.default)(e),n=(0,a.default)(t).getTime()-(0,o.default)(t).getTime();return Math.round(n/l)+1};var r=u(n(1171)),a=u(n(79)),o=u(n(4275)),i=u(n(8734));function u(e){return e&&e.__esModule?e:{default:e}}var l=6048e5;e.exports=t.default},1370:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(1,arguments);var t=(0,r.default)(e),n=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(n+1,0,4),i.setUTCHours(0,0,0,0);var u=(0,o.default)(i),l=new Date(0);l.setUTCFullYear(n,0,4),l.setUTCHours(0,0,0,0);var d=(0,o.default)(l);return t.getTime()>=u.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1};var r=i(n(1171)),a=i(n(8734)),o=i(n(79));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},623:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,i.default)(1,arguments);var n=(0,r.default)(e),u=(0,a.default)(n,t).getTime()-(0,o.default)(n,t).getTime();return Math.round(u/l)+1};var r=u(n(1171)),a=u(n(9209)),o=u(n(4118)),i=u(n(8734));function u(e){return e&&e.__esModule?e:{default:e}}var l=6048e5;e.exports=t.default},6226:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n,l,d,c,s,f,h,g;(0,a.default)(1,arguments);var p=(0,r.default)(e),m=p.getUTCFullYear(),v=(0,u.getDefaultOptions)(),w=(0,i.default)(null!==(n=null!==(l=null!==(d=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(s=t.locale)||void 0===s||null===(f=s.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==d?d:v.firstWeekContainsDate)&&void 0!==l?l:null===(h=v.locale)||void 0===h||null===(g=h.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==n?n:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(m+1,0,w),b.setUTCHours(0,0,0,0);var y=(0,o.default)(b,t),_=new Date(0);_.setUTCFullYear(m,0,w),_.setUTCHours(0,0,0,0);var A=(0,o.default)(_,t);return p.getTime()>=y.getTime()?m+1:p.getTime()>=A.getTime()?m:m-1};var r=l(n(1171)),a=l(n(8734)),o=l(n(9209)),i=l(n(2084)),u=n(8729);function l(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},6736:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isProtectedDayOfYearToken=function(e){return-1!==n.indexOf(e)},t.isProtectedWeekYearToken=function(e){return-1!==r.indexOf(e)},t.throwProtectedError=function(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))};var n=["D","DD"],r=["YY","YYYY"]},8734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")},e.exports=t.default},79:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(1,arguments);var t=1,n=(0,r.default)(e),o=n.getUTCDay(),i=(o<t?7:0)+o-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n};var r=o(n(1171)),a=o(n(8734));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},4275:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,o.default)(1,arguments);var t=(0,r.default)(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var i=(0,a.default)(n);return i};var r=i(n(1370)),a=i(n(79)),o=i(n(8734));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},9209:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n,u,l,d,c,s,f,h;(0,a.default)(1,arguments);var g=(0,i.getDefaultOptions)(),p=(0,o.default)(null!==(n=null!==(u=null!==(l=null!==(d=null==t?void 0:t.weekStartsOn)&&void 0!==d?d:null==t||null===(c=t.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==l?l:g.weekStartsOn)&&void 0!==u?u:null===(f=g.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==n?n:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=(0,r.default)(e),v=m.getUTCDay(),w=(v<p?7:0)+v-p;return m.setUTCDate(m.getUTCDate()-w),m.setUTCHours(0,0,0,0),m};var r=u(n(1171)),a=u(n(8734)),o=u(n(2084)),i=n(8729);function u(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},4118:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n,l,d,c,s,f,h,g;(0,a.default)(1,arguments);var p=(0,u.getDefaultOptions)(),m=(0,i.default)(null!==(n=null!==(l=null!==(d=null!==(c=null==t?void 0:t.firstWeekContainsDate)&&void 0!==c?c:null==t||null===(s=t.locale)||void 0===s||null===(f=s.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==d?d:p.firstWeekContainsDate)&&void 0!==l?l:null===(h=p.locale)||void 0===h||null===(g=h.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==n?n:1),v=(0,r.default)(e,t),w=new Date(0);w.setUTCFullYear(v,0,m),w.setUTCHours(0,0,0,0);var b=(0,o.default)(w,t);return b};var r=l(n(6226)),a=l(n(8734)),o=l(n(9209)),i=l(n(2084)),u=n(8729);function l(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},2084:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)},e.exports=t.default},5065:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,o.default)(2,arguments);var n=(0,a.default)(e).getTime(),i=(0,r.default)(t);return new Date(n+i)};var r=i(n(2084)),a=i(n(1171)),o=i(n(8734));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},5616:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var g,v,w,_,A,C,M,x,T,k,E,D,P,O,j,S,U,N;(0,s.default)(2,arguments);var Y=String(t),B=(0,f.getDefaultOptions)(),W=null!==(g=null!==(v=null==n?void 0:n.locale)&&void 0!==v?v:B.locale)&&void 0!==g?g:h.default,z=(0,c.default)(null!==(w=null!==(_=null!==(A=null!==(C=null==n?void 0:n.firstWeekContainsDate)&&void 0!==C?C:null==n||null===(M=n.locale)||void 0===M||null===(x=M.options)||void 0===x?void 0:x.firstWeekContainsDate)&&void 0!==A?A:B.firstWeekContainsDate)&&void 0!==_?_:null===(T=B.locale)||void 0===T||null===(k=T.options)||void 0===k?void 0:k.firstWeekContainsDate)&&void 0!==w?w:1);if(!(z>=1&&z<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var H=(0,c.default)(null!==(E=null!==(D=null!==(P=null!==(O=null==n?void 0:n.weekStartsOn)&&void 0!==O?O:null==n||null===(j=n.locale)||void 0===j||null===(S=j.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==P?P:B.weekStartsOn)&&void 0!==D?D:null===(U=B.locale)||void 0===U||null===(N=U.options)||void 0===N?void 0:N.weekStartsOn)&&void 0!==E?E:0);if(!(H>=0&&H<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!W.localize)throw new RangeError("locale must contain localize property");if(!W.formatLong)throw new RangeError("locale must contain formatLong property");var I=(0,o.default)(e);if(!(0,r.default)(I))throw new RangeError("Invalid time value");var F=(0,l.default)(I),L=(0,a.default)(I,F),Z={firstWeekContainsDate:z,weekStartsOn:H,locale:W,_originalDate:I},q=Y.match(m).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,u.default[t])(e,W.formatLong):e})).join("").match(p).map((function(r){if("''"===r)return"'";var a=r[0];if("'"===a)return y(r);var o=i.default[a];if(o)return null!=n&&n.useAdditionalWeekYearTokens||!(0,d.isProtectedWeekYearToken)(r)||(0,d.throwProtectedError)(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!(0,d.isProtectedDayOfYearToken)(r)||(0,d.throwProtectedError)(r,t,String(e)),o(L,r,W.localize,Z);if(a.match(b))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("");return q};var r=g(n(9989)),a=g(n(3239)),o=g(n(1171)),i=g(n(7100)),u=g(n(5209)),l=g(n(3561)),d=n(6736),c=g(n(2084)),s=g(n(8734)),f=n(8729),h=g(n(7561));function g(e){return e&&e.__esModule?e:{default:e}}var p=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,m=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,v=/^'([^]*?)'?$/,w=/''/g,b=/[a-zA-Z]/;function y(e){var t=e.match(v);return t?t[1].replace(w,"'"):e}e.exports=t.default},2382:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.default)(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)};var r,a=(r=n(8734))&&r.__esModule?r:{default:r};e.exports=t.default},9989:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,o.default)(1,arguments),!(0,r.default)(e)&&"number"!=typeof e)return!1;var t=(0,a.default)(e);return!isNaN(Number(t))};var r=i(n(2382)),a=i(n(1171)),o=i(n(8734));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},289:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}},e.exports=t.default},6245:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,u=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[u]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}},e.exports=t.default},3421:(e,t)=>{function n(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function r(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=a.width,i=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],u=t.match(i);if(!u)return null;var l,d=u[0],c=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(c)?r(c,(function(e){return e.test(d)})):n(c,(function(e){return e.test(d)}));l=e.valueCallback?e.valueCallback(s):s,l=a.valueCallback?a.valueCallback(l):l;var f=t.slice(d.length);return{value:l,rest:f}}},e.exports=t.default},8926:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.match(e.matchPattern);if(!r)return null;var a=r[0],o=t.match(e.parsePattern);if(!o)return null;var i=e.valueCallback?e.valueCallback(o[0]):o[0];i=n.valueCallback?n.valueCallback(i):i;var u=t.slice(a.length);return{value:i,rest:u}}},e.exports=t.default},1924:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};t.default=function(e,t,r){var a,o=n[e];return a="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+a:a+" ago":a},e.exports=t.default},5062:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(289))&&r.__esModule?r:{default:r},o={date:(0,a.default)({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:(0,a.default)({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:(0,a.default)({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};t.default=o,e.exports=t.default},5102:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};t.default=function(e,t,r,a){return n[e]},e.exports=t.default},7839:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,a=(r=n(6245))&&r.__esModule?r:{default:r},o={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:(0,a.default)({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:(0,a.default)({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:(0,a.default)({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:(0,a.default)({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:(0,a.default)({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};t.default=o,e.exports=t.default},9796:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=a(n(3421));function a(e){return e&&e.__esModule?e:{default:e}}var o={ordinalNumber:(0,a(n(8926)).default)({matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}}),era:(0,r.default)({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:(0,r.default)({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:(0,r.default)({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:(0,r.default)({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:(0,r.default)({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};t.default=o,e.exports=t.default},2512:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=l(n(1924)),a=l(n(5062)),o=l(n(5102)),i=l(n(7839)),u=l(n(9796));function l(e){return e&&e.__esModule?e:{default:e}}var d={code:"en-US",formatDistance:r.default,formatLong:a.default,formatRelative:o.default,localize:i.default,match:u.default,options:{weekStartsOn:0,firstWeekContainsDate:1}};t.default=d,e.exports=t.default},3239:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){(0,a.default)(2,arguments);var n=(0,o.default)(t);return(0,r.default)(e,-n)};var r=i(n(5065)),a=i(n(8734)),o=i(n(2084));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},1171:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){(0,a.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))};var r,a=(r=n(8734))&&r.__esModule?r:{default:r};e.exports=t.default},4977:e=>{function t(e,t,n,r,a,o){this._color=e,this.key=t,this.value=n,this.left=r,this.right=a,this._count=o}function n(e){return new t(e._color,e.key,e.value,e.left,e.right,e._count)}function r(e,n){return new t(e,n.key,n.value,n.left,n.right,n._count)}function a(e){e._count=1+(e.left?e.left._count:0)+(e.right?e.right._count:0)}function o(e,t){this._compare=e,this.root=t}e.exports=function(e){return new o(e||h,null)};var i=o.prototype;function u(e,t){var n;return t.left&&(n=u(e,t.left))?n:(n=e(t.key,t.value))||(t.right?u(e,t.right):void 0)}function l(e,t,n,r){if(t(e,r.key)<=0){var a;if(r.left&&(a=l(e,t,n,r.left)))return a;if(a=n(r.key,r.value))return a}if(r.right)return l(e,t,n,r.right)}function d(e,t,n,r,a){var o,i=n(e,a.key),u=n(t,a.key);if(i<=0){if(a.left&&(o=d(e,t,n,r,a.left)))return o;if(u>0&&(o=r(a.key,a.value)))return o}if(u>0&&a.right)return d(e,t,n,r,a.right)}function c(e,t){this.tree=e,this._stack=t}Object.defineProperty(i,"keys",{get:function(){var e=[];return this.forEach((function(t,n){e.push(t)})),e}}),Object.defineProperty(i,"values",{get:function(){var e=[];return this.forEach((function(t,n){e.push(n)})),e}}),Object.defineProperty(i,"length",{get:function(){return this.root?this.root._count:0}}),i.insert=function(e,n){for(var i=this._compare,u=this.root,l=[],d=[];u;){var c=i(e,u.key);l.push(u),d.push(c),u=c<=0?u.left:u.right}l.push(new t(0,e,n,null,null,1));for(var s=l.length-2;s>=0;--s)u=l[s],d[s]<=0?l[s]=new t(u._color,u.key,u.value,l[s+1],u.right,u._count+1):l[s]=new t(u._color,u.key,u.value,u.left,l[s+1],u._count+1);for(s=l.length-1;s>1;--s){var f=l[s-1];if(u=l[s],1===f._color||1===u._color)break;var h=l[s-2];if(h.left===f)if(f.left===u){if(!(g=h.right)||0!==g._color){h._color=0,h.left=f.right,f._color=1,f.right=h,l[s-2]=f,l[s-1]=u,a(h),a(f),s>=3&&((p=l[s-3]).left===h?p.left=f:p.right=f);break}f._color=1,h.right=r(1,g),h._color=0,s-=1}else{if(!(g=h.right)||0!==g._color){f.right=u.left,h._color=0,h.left=u.right,u._color=1,u.left=f,u.right=h,l[s-2]=u,l[s-1]=f,a(h),a(f),a(u),s>=3&&((p=l[s-3]).left===h?p.left=u:p.right=u);break}f._color=1,h.right=r(1,g),h._color=0,s-=1}else if(f.right===u){if(!(g=h.left)||0!==g._color){h._color=0,h.right=f.left,f._color=1,f.left=h,l[s-2]=f,l[s-1]=u,a(h),a(f),s>=3&&((p=l[s-3]).right===h?p.right=f:p.left=f);break}f._color=1,h.left=r(1,g),h._color=0,s-=1}else{var g;if(!(g=h.left)||0!==g._color){var p;f.left=u.right,h._color=0,h.right=u.left,u._color=1,u.right=f,u.left=h,l[s-2]=u,l[s-1]=f,a(h),a(f),a(u),s>=3&&((p=l[s-3]).right===h?p.right=u:p.left=u);break}f._color=1,h.left=r(1,g),h._color=0,s-=1}}return l[0]._color=1,new o(i,l[0])},i.forEach=function(e,t,n){if(this.root)switch(arguments.length){case 1:return u(e,this.root);case 2:return l(t,this._compare,e,this.root);case 3:if(this._compare(t,n)>=0)return;return d(t,n,this._compare,e,this.root)}},Object.defineProperty(i,"begin",{get:function(){for(var e=[],t=this.root;t;)e.push(t),t=t.left;return new c(this,e)}}),Object.defineProperty(i,"end",{get:function(){for(var e=[],t=this.root;t;)e.push(t),t=t.right;return new c(this,e)}}),i.at=function(e){if(e<0)return new c(this,[]);for(var t=this.root,n=[];;){if(n.push(t),t.left){if(e<t.left._count){t=t.left;continue}e-=t.left._count}if(!e)return new c(this,n);if(e-=1,!t.right)break;if(e>=t.right._count)break;t=t.right}return new c(this,[])},i.ge=function(e){for(var t=this._compare,n=this.root,r=[],a=0;n;){var o=t(e,n.key);r.push(n),o<=0&&(a=r.length),n=o<=0?n.left:n.right}return r.length=a,new c(this,r)},i.gt=function(e){for(var t=this._compare,n=this.root,r=[],a=0;n;){var o=t(e,n.key);r.push(n),o<0&&(a=r.length),n=o<0?n.left:n.right}return r.length=a,new c(this,r)},i.lt=function(e){for(var t=this._compare,n=this.root,r=[],a=0;n;){var o=t(e,n.key);r.push(n),o>0&&(a=r.length),n=o<=0?n.left:n.right}return r.length=a,new c(this,r)},i.le=function(e){for(var t=this._compare,n=this.root,r=[],a=0;n;){var o=t(e,n.key);r.push(n),o>=0&&(a=r.length),n=o<0?n.left:n.right}return r.length=a,new c(this,r)},i.find=function(e){for(var t=this._compare,n=this.root,r=[];n;){var a=t(e,n.key);if(r.push(n),0===a)return new c(this,r);n=a<=0?n.left:n.right}return new c(this,[])},i.remove=function(e){var t=this.find(e);return t?t.remove():this},i.get=function(e){for(var t=this._compare,n=this.root;n;){var r=t(e,n.key);if(0===r)return n.value;n=r<=0?n.left:n.right}};var s=c.prototype;function f(e,t){e.key=t.key,e.value=t.value,e.left=t.left,e.right=t.right,e._color=t._color,e._count=t._count}function h(e,t){return e<t?-1:e>t?1:0}Object.defineProperty(s,"valid",{get:function(){return this._stack.length>0}}),Object.defineProperty(s,"node",{get:function(){return this._stack.length>0?this._stack[this._stack.length-1]:null},enumerable:!0}),s.clone=function(){return new c(this.tree,this._stack.slice())},s.remove=function(){var e=this._stack;if(0===e.length)return this.tree;var i=new Array(e.length),u=e[e.length-1];i[i.length-1]=new t(u._color,u.key,u.value,u.left,u.right,u._count);for(var l=e.length-2;l>=0;--l)(u=e[l]).left===e[l+1]?i[l]=new t(u._color,u.key,u.value,i[l+1],u.right,u._count):i[l]=new t(u._color,u.key,u.value,u.left,i[l+1],u._count);if((u=i[i.length-1]).left&&u.right){var d=i.length;for(u=u.left;u.right;)i.push(u),u=u.right;var c=i[d-1];for(i.push(new t(u._color,c.key,c.value,u.left,u.right,u._count)),i[d-1].key=u.key,i[d-1].value=u.value,l=i.length-2;l>=d;--l)u=i[l],i[l]=new t(u._color,u.key,u.value,u.left,i[l+1],u._count);i[d-1].left=i[d]}if(0===(u=i[i.length-1])._color){var s=i[i.length-2];for(s.left===u?s.left=null:s.right===u&&(s.right=null),i.pop(),l=0;l<i.length;++l)i[l]._count--;return new o(this.tree._compare,i[0])}if(u.left||u.right){for(u.left?f(u,u.left):u.right&&f(u,u.right),u._color=1,l=0;l<i.length-1;++l)i[l]._count--;return new o(this.tree._compare,i[0])}if(1===i.length)return new o(this.tree._compare,null);for(l=0;l<i.length;++l)i[l]._count--;var h=i[i.length-2];return function(e){for(var t,o,i,u,l=e.length-1;l>=0;--l){if(t=e[l],0===l)return void(t._color=1);if((o=e[l-1]).left===t){if((i=o.right).right&&0===i.right._color)return u=(i=o.right=n(i)).right=n(i.right),o.right=i.left,i.left=o,i.right=u,i._color=o._color,t._color=1,o._color=1,u._color=1,a(o),a(i),l>1&&((d=e[l-2]).left===o?d.left=i:d.right=i),void(e[l-1]=i);if(i.left&&0===i.left._color)return u=(i=o.right=n(i)).left=n(i.left),o.right=u.left,i.left=u.right,u.left=o,u.right=i,u._color=o._color,o._color=1,i._color=1,t._color=1,a(o),a(i),a(u),l>1&&((d=e[l-2]).left===o?d.left=u:d.right=u),void(e[l-1]=u);if(1===i._color){if(0===o._color)return o._color=1,void(o.right=r(0,i));o.right=r(0,i);continue}i=n(i),o.right=i.left,i.left=o,i._color=o._color,o._color=0,a(o),a(i),l>1&&((d=e[l-2]).left===o?d.left=i:d.right=i),e[l-1]=i,e[l]=o,l+1<e.length?e[l+1]=t:e.push(t),l+=2}else{if((i=o.left).left&&0===i.left._color)return u=(i=o.left=n(i)).left=n(i.left),o.left=i.right,i.right=o,i.left=u,i._color=o._color,t._color=1,o._color=1,u._color=1,a(o),a(i),l>1&&((d=e[l-2]).right===o?d.right=i:d.left=i),void(e[l-1]=i);if(i.right&&0===i.right._color)return u=(i=o.left=n(i)).right=n(i.right),o.left=u.right,i.right=u.left,u.right=o,u.left=i,u._color=o._color,o._color=1,i._color=1,t._color=1,a(o),a(i),a(u),l>1&&((d=e[l-2]).right===o?d.right=u:d.left=u),void(e[l-1]=u);if(1===i._color){if(0===o._color)return o._color=1,void(o.left=r(0,i));o.left=r(0,i);continue}var d;i=n(i),o.left=i.right,i.right=o,i._color=o._color,o._color=0,a(o),a(i),l>1&&((d=e[l-2]).right===o?d.right=i:d.left=i),e[l-1]=i,e[l]=o,l+1<e.length?e[l+1]=t:e.push(t),l+=2}}}(i),h.left===u?h.left=null:h.right=null,new o(this.tree._compare,i[0])},Object.defineProperty(s,"key",{get:function(){if(this._stack.length>0)return this._stack[this._stack.length-1].key},enumerable:!0}),Object.defineProperty(s,"value",{get:function(){if(this._stack.length>0)return this._stack[this._stack.length-1].value},enumerable:!0}),Object.defineProperty(s,"index",{get:function(){var e=0,t=this._stack;if(0===t.length){var n=this.tree.root;return n?n._count:0}t[t.length-1].left&&(e=t[t.length-1].left._count);for(var r=t.length-2;r>=0;--r)t[r+1]===t[r].right&&(++e,t[r].left&&(e+=t[r].left._count));return e},enumerable:!0}),s.next=function(){var e=this._stack;if(0!==e.length){var t=e[e.length-1];if(t.right)for(t=t.right;t;)e.push(t),t=t.left;else for(e.pop();e.length>0&&e[e.length-1].right===t;)t=e[e.length-1],e.pop()}},Object.defineProperty(s,"hasNext",{get:function(){var e=this._stack;if(0===e.length)return!1;if(e[e.length-1].right)return!0;for(var t=e.length-1;t>0;--t)if(e[t-1].left===e[t])return!0;return!1}}),s.update=function(e){var n=this._stack;if(0===n.length)throw new Error("Can't update empty node!");var r=new Array(n.length),a=n[n.length-1];r[r.length-1]=new t(a._color,a.key,e,a.left,a.right,a._count);for(var i=n.length-2;i>=0;--i)(a=n[i]).left===n[i+1]?r[i]=new t(a._color,a.key,a.value,r[i+1],a.right,a._count):r[i]=new t(a._color,a.key,a.value,a.left,r[i+1],a._count);return new o(this.tree._compare,r[0])},s.prev=function(){var e=this._stack;if(0!==e.length){var t=e[e.length-1];if(t.left)for(t=t.left;t;)e.push(t),t=t.right;else for(e.pop();e.length>0&&e[e.length-1].left===t;)t=e[e.length-1],e.pop()}},Object.defineProperty(s,"hasPrev",{get:function(){var e=this._stack;if(0===e.length)return!1;if(e[e.length-1].left)return!0;for(var t=e.length-1;t>0;--t)if(e[t-1].right===e[t])return!0;return!1}})},3379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],u=0;u<e.length;u++){var l=e[u],d=r.base?l[0]+r.base:l[0],c=o[d]||0,s="".concat(d," ").concat(c);o[d]=c+1;var f=n(s),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var g=a(h,r);r.byIndex=u,t.splice(u,0,{identifier:s,updater:g,references:1})}i.push(s)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var u=n(o[i]);t[u].references--}for(var l=r(e,a),d=0;d<o.length;d++){var c=n(o[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},5721:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,a,o,i){var u=new Date(0);return u.setUTCFullYear(e,t,n),u.setUTCHours(r,a,o,i),u},e.exports=t.default},5855:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=function(e,t,n){if(n&&!n.code)throw new Error("date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`");return new Intl.DateTimeFormat(n?[n.code,"en-US"]:void 0,{timeZone:t,timeZoneName:e})}(e,n.timeZone,n.locale);return r.formatToParts?function(e,t){var n=e.formatToParts(t);return n[n.length-1].value}(r,t):function(e,t){var n=e.format(t).replace(/\u200E/g,""),r=/ [\w-+ ]+$/.exec(n);return r?r[0].substr(1):""}(r,t)},e.exports=t.default},2734:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r,o,s;if(""===e)return 0;if(r=u.timezoneZ.exec(e))return 0;if(r=u.timezoneHH.exec(e))return d(s=parseInt(r[1],10))?-s*i:NaN;if(r=u.timezoneHHMM.exec(e)){s=parseInt(r[1],10);var f=parseInt(r[2],10);return d(s,f)?(o=Math.abs(s)*i+6e4*f,s>0?-o:o):NaN}if(function(e){if(c[e])return!0;try{return new Intl.DateTimeFormat(void 0,{timeZone:e}),c[e]=!0,!0}catch(e){return!1}}(e)){t=new Date(t||Date.now());var h=n?t:function(e){return(0,a.default)(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds())}(t),g=l(h,e),p=n?g:function(e,t,n){var r=e.getTime()-t,a=l(new Date(r),n);if(t===a)return t;r-=a-t;var o=l(new Date(r),n);return a===o?a:Math.max(a,o)}(t,g,e);return-p}return NaN};var r=o(n(2712)),a=o(n(5721));function o(e){return e&&e.__esModule?e:{default:e}}var i=36e5,u={timezone:/([Z+-].*)$/,timezoneZ:/^(Z)$/,timezoneHH:/^([+-]\d{2})$/,timezoneHHMM:/^([+-]\d{2}):?(\d{2})$/};function l(e,t){var n=(0,r.default)(e,t),o=(0,a.default)(n[0],n[1]-1,n[2],n[3]%24,n[4],n[5],0).getTime(),i=e.getTime(),u=i%1e3;return o-(i-(u>=0?u:1e3+u))}function d(e,t){return-23<=e&&e<=23&&(null==t||0<=t&&t<=59)}var c={};e.exports=t.default},7048:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=/(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/,e.exports=t.default},2712:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var a=function(e){if(!r[e]){var t=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:"America/New_York",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}).format(new Date("2014-06-25T04:00:00.123Z")),n="06/25/2014, 00:00:00"===t||"‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00"===t;r[e]=n?new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}):new Intl.DateTimeFormat("en-US",{hourCycle:"h23",timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}return r[e]}(t);return a.formatToParts?function(e,t){try{for(var r=e.formatToParts(t),a=[],o=0;o<r.length;o++){var i=n[r[o].type];i>=0&&(a[i]=parseInt(r[o].value,10))}return a}catch(e){if(e instanceof RangeError)return[NaN];throw e}}(a,e):function(e,t){var n=e.format(t).replace(/\u200E/g,""),r=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(n);return[r[3],r[1],r[2],r[4],r[5],r[6]]}(a,e)};var n={year:0,month:1,day:2,hour:3,minute:4,second:5},r={};e.exports=t.default},3826:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(5855)),a=o(n(2734));function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=e?(0,a.default)(e,t,!0)/6e4:t.getTimezoneOffset();if(Number.isNaN(n))throw new RangeError("Invalid time zone specified: "+e);return n}function u(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}function l(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+u(Math.floor(a/60),2)+n+u(Math.floor(a%60),2)}function d(e,t){return e%60==0?(e>0?"-":"+")+u(Math.abs(e)/60,2):l(e,t)}var c={X:function(e,t,n,r){var a=i(r.timeZone,r._originalDate||e);if(0===a)return"Z";switch(t){case"X":return d(a);case"XXXX":case"XX":return l(a);default:return l(a,":")}},x:function(e,t,n,r){var a=i(r.timeZone,r._originalDate||e);switch(t){case"x":return d(a);case"xxxx":case"xx":return l(a);default:return l(a,":")}},O:function(e,t,n,r){var a=i(r.timeZone,r._originalDate||e);switch(t){case"O":case"OO":case"OOO":return"GMT"+function(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);return n+String(a)+":"+u(o,2)}(a);default:return"GMT"+l(a,":")}},z:function(e,t,n,a){var o=a._originalDate||e;switch(t){case"z":case"zz":case"zzz":return(0,r.default)("short",o,a);default:return(0,r.default)("long",o,a)}}};t.default=c,e.exports=t.default},6558:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var i=String(t),l=n||{},d=i.match(u);if(d){var c=(0,o.default)(e,l);i=d.reduce((function(e,t){if("'"===t[0])return e;var n=e.indexOf(t),r="'"===e[n-1],o=e.replace(t,"'"+a.default[t[0]](c,t,null,l)+"'");return r?o.substring(0,n-1)+o.substring(n+1):o}),i)}return(0,r.default)(e,i,l)};var r=i(n(5616)),a=i(n(3826)),o=i(n(1476));function i(e){return e&&e.__esModule?e:{default:e}}var u=/([xXOz]+)|''|'(''|[^'])+('|$)/g;e.exports=t.default},6645:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,i){var u=(0,r.default)(i);return u.timeZone=t,(0,a.default)((0,o.default)(e,t),n,u)};var r=i(n(6420)),a=i(n(6558)),o=i(n(1132));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},4992:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return-(0,a.default)(e,t)};var r,a=(r=n(2734))&&r.__esModule?r:{default:r};e.exports=t.default},722:(e,t,n)=>{e.exports={format:n(6558),formatInTimeZone:n(6645),getTimezoneOffset:n(4992),toDate:n(1476),utcToZonedTime:n(1132),zonedTimeToUtc:n(8516)}},1476:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(arguments.length<1)throw new TypeError("1 argument required, but only "+arguments.length+" present");if(null===e)return new Date(NaN);var n=t||{},i=null==n.additionalDigits?2:(0,r.default)(n.additionalDigits);if(2!==i&&1!==i&&0!==i)throw new RangeError("additionalDigits must be 0, 1 or 2");if(e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e))return new Date(e.getTime());if("number"==typeof e||"[object Number]"===Object.prototype.toString.call(e))return new Date(e);if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var u=c(e),l=s(u.date,i),d=l.year,g=l.restDateString,p=f(g,d);if(isNaN(p))return new Date(NaN);if(p){var m,v=p.getTime(),w=0;if(u.time&&(w=h(u.time),isNaN(w)))return new Date(NaN);if(u.timeZone||n.timeZone){if(m=(0,o.default)(u.timeZone||n.timeZone,new Date(v+w)),isNaN(m))return new Date(NaN)}else m=(0,a.default)(new Date(v+w)),m=(0,a.default)(new Date(v+w+m));return new Date(v+w+m)}return new Date(NaN)};var r=u(n(2084)),a=u(n(3561)),o=u(n(2734)),i=u(n(7048));function u(e){return e&&e.__esModule?e:{default:e}}var l=36e5,d={dateTimePattern:/^([0-9W+-]+)(T| )(.*)/,datePattern:/^([0-9W+-]+)(.*)/,plainTime:/:/,YY:/^(\d{2})$/,YYY:[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],YYYY:/^(\d{4})/,YYYYY:[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],MM:/^-(\d{2})$/,DDD:/^-?(\d{3})$/,MMDD:/^-?(\d{2})-?(\d{2})$/,Www:/^-?W(\d{2})$/,WwwD:/^-?W(\d{2})-?(\d{1})$/,HH:/^(\d{2}([.,]\d*)?)$/,HHMM:/^(\d{2}):?(\d{2}([.,]\d*)?)$/,HHMMSS:/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,timeZone:i.default};function c(e){var t,n={},r=d.dateTimePattern.exec(e);if(r?(n.date=r[1],t=r[3]):(r=d.datePattern.exec(e))?(n.date=r[1],t=r[2]):(n.date=null,t=e),t){var a=d.timeZone.exec(t);a?(n.time=t.replace(a[1],""),n.timeZone=a[1].trim()):n.time=t}return n}function s(e,t){var n,r=d.YYY[t],a=d.YYYYY[t];if(n=d.YYYY.exec(e)||a.exec(e)){var o=n[1];return{year:parseInt(o,10),restDateString:e.slice(o.length)}}if(n=d.YY.exec(e)||r.exec(e)){var i=n[1];return{year:100*parseInt(i,10),restDateString:e.slice(i.length)}}return{year:null}}function f(e,t){if(null===t)return null;var n,r,a,o;if(0===e.length)return(r=new Date(0)).setUTCFullYear(t),r;if(n=d.MM.exec(e))return r=new Date(0),w(t,a=parseInt(n[1],10)-1)?(r.setUTCFullYear(t,a),r):new Date(NaN);if(n=d.DDD.exec(e)){r=new Date(0);var i=parseInt(n[1],10);return function(e,t){if(t<1)return!1;var n=v(e);return!(n&&t>366)&&!(!n&&t>365)}(t,i)?(r.setUTCFullYear(t,0,i),r):new Date(NaN)}if(n=d.MMDD.exec(e)){r=new Date(0),a=parseInt(n[1],10)-1;var u=parseInt(n[2],10);return w(t,a,u)?(r.setUTCFullYear(t,a,u),r):new Date(NaN)}if(n=d.Www.exec(e))return b(0,o=parseInt(n[1],10)-1)?g(t,o):new Date(NaN);if(n=d.WwwD.exec(e)){o=parseInt(n[1],10)-1;var l=parseInt(n[2],10)-1;return b(0,o,l)?g(t,o,l):new Date(NaN)}return null}function h(e){var t,n,r;if(t=d.HH.exec(e))return y(n=parseFloat(t[1].replace(",",".")))?n%24*l:NaN;if(t=d.HHMM.exec(e))return y(n=parseInt(t[1],10),r=parseFloat(t[2].replace(",",".")))?n%24*l+6e4*r:NaN;if(t=d.HHMMSS.exec(e)){n=parseInt(t[1],10),r=parseInt(t[2],10);var a=parseFloat(t[3].replace(",","."));return y(n,r,a)?n%24*l+6e4*r+1e3*a:NaN}return null}function g(e,t,n){t=t||0,n=n||0;var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*t+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}var p=[31,28,31,30,31,30,31,31,30,31,30,31],m=[31,29,31,30,31,30,31,31,30,31,30,31];function v(e){return e%400==0||e%4==0&&e%100!=0}function w(e,t,n){if(t<0||t>11)return!1;if(null!=n){if(n<1)return!1;var r=v(e);if(r&&n>m[t])return!1;if(!r&&n>p[t])return!1}return!0}function b(e,t,n){return!(t<0||t>52||null!=n&&(n<0||n>6))}function y(e,t,n){return!(null!=e&&(e<0||e>=25)||null!=t&&(t<0||t>=60)||null!=n&&(n<0||n>=60))}e.exports=t.default},1132:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var o=(0,a.default)(e,n),i=(0,r.default)(t,o,!0),u=new Date(o.getTime()-i),l=new Date(0);return l.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),l.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),l};var r=o(n(2734)),a=o(n(1476));function o(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},8516:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if("string"==typeof e&&!e.match(o.default)){var l=(0,r.default)(n);return l.timeZone=t,(0,a.default)(e,l)}var d=(0,a.default)(e,n),c=(0,u.default)(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds()).getTime(),s=(0,i.default)(t,new Date(c));return new Date(c+s)};var r=l(n(6420)),a=l(n(1476)),o=l(n(7048)),i=l(n(2734)),u=l(n(5721));function l(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{const e=n.p+"95ae9a85b951c2d89c9d.png",t=n.p+"3eae6314a6537aba0d83.png",r=n.p+"a9a345a261ea70e40dd1.png",a=n.p+"8bcb14a90e239713fd5d.png",o=n.p+"e642f1b2eca625506026.png",i=n.p+"5b6ceb7779798ac92c62.png",u=n.p+"331e2916bc716e7e9f2d.png";const l=n.p+"4a3b733896325f69e4b1.png",d=n.p+"e918ffc8f011e5f141cb.png",c=n.p+"8ceb1e04f9dfbd773cec.png",s=n.p+"66dd9d7d1e47b1a93292.png",f=n.p+"70ce40eea8fd686eff9d.png";var h=n(3379),g=n.n(h),p=n(7795),m=n.n(p),v=n(569),w=n.n(v),b=n(3565),y=n.n(b),_=n(9216),A=n.n(_),C=n(4589),M=n.n(C),x=n(5426),T={};T.styleTagTransform=M(),T.setAttributes=y(),T.insert=w().bind(null,"head"),T.domAPI=m(),T.insertStyleElement=A(),g()(x.Z,T),x.Z&&x.Z.locals&&x.Z.locals;var k=n(722);const E=n(4977),D=n.p+"ebd46de5b133590339eb.jpg",P=n.p+"d52dce0fcb57923ce3b1.jpg",O=n.p+"2bd84887c8b43b0ae3a9.jpg",j=n.p+"48b497c91dfe5fe70a07.jpg",S=n.p+"5c1748c7d637ba354374.jpg",U=n.p+"6249e47fb11d4179b3fc.jpg",N=n.p+"20d892c99bed6dfd0aa8.jpg",Y=n.p+"ebd46de5b133590339eb.jpg",B=n.p+"9f37f115a53e902b5e41.png";!function n(h){const g=async function(e,t){const n=`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=08d632f209c72452f8b88dcb7c9aa7f3&units=metric`,r=await fetch(n);return await r.json()}(0,h),p=document.querySelector(".main"),m=document.querySelector(".side"),v=document.body.appendChild(function(){const e=document.createElement("div");e.style.backgroundColor="rgba(0, 0, 0, 0.5)",e.style.height="100%",e.style.width="100%",e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.display="flex",e.style.justifyContent="center",e.style.alignItems="center";const t=document.createElement("div");return t.textContent="Loading...",t.style.fontSize="3rem",e.appendChild(t),e}());g.then((g=>{const v=function(e){const t=e.sys;return{sunrise:t.sunrise,sunset:t.sunset,dt:e.dt,timezone:e.timezone}}(g),w=function(e){const t=e.weather[0];return{main:t.main,description:t.description,id:t.id}}(g),b=function(e){const t=e.main;return{temp:t.temp,feelsLike:t.feels_like}}(g),y={humidity:g.main.humidity},_={pressure:g.main.pressure},A=function(e){const t=e.wind;return{speed:t.speed,deg:t.deg}}(g),C=function(e){return{cloudiness:e.clouds.all}}(g);p.textContent="",m.textContent="",p.appendChild(function(e){const t=document.createElement("div");t.classList.add("temperature-container");const n=document.createElement("div");return n.classList.add("temp"),n.textContent=`${Math.round(e.temp)}°C`,t.appendChild(n),t}(b)),p.appendChild(function(n,l){const d=document.createElement("div");d.classList.add("weather-container");const c=new Image;c.src=function(n,l){if(n>=200&&n<=299)return e;if(n>=300&&n<=399)return t;if(n>=500&&n<=599)return t;if(n>=600&&n<=699)return r;if(n>=700&&n<=799)return a;if(800===n){const e=l.dt+l.timezone;return e>l.sunset?o:e>l.sunrise?i:o}return n>=801&&n<=809?u:void 0}(n.id,l);const s=document.createElement("div");return s.classList.add("description"),s.textContent=n.description,d.appendChild(s),d.appendChild(c),d}(w,v));const M=function(e){const t=document.createElement("form");t.classList.add("location-form");const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("placeholder","Your city");const r=document.createElement("button");r.setAttribute("type","button");const a=new Image;return a.src=B,r.appendChild(a),t.addEventListener("submit",(e=>e.preventDefault())),r.addEventListener("click",(()=>{e(n.value)})),n.addEventListener("keydown",(t=>{"Enter"===t.key&&e(n.value)})),t.appendChild(n),t.appendChild(r),t}(n);M.querySelector("input[type='text']").value=h,localStorage.setItem("location",h),p.appendChild(M),m.appendChild(function(e){const t=document.createElement("div");t.classList.add("humidity-container");const n=new Image;n.src=l;const r=document.createElement("div");return r.classList.add("humidity"),r.textContent=`${e.humidity}%`,t.appendChild(n),t.appendChild(r),t}(y)),m.appendChild(function(e){const t=document.createElement("div");t.classList.add("pressure-container");const n=new Image;n.src=d;const r=document.createElement("div");return r.classList.add("pressure"),r.textContent=`${e.pressure} hPa`,t.appendChild(n),t.appendChild(r),t}(_)),m.appendChild(function(e){const t=document.createElement("div");t.classList.add("wind-container");const n=document.createElement("div");n.classList.add("speed-container");const r=new Image;r.src=c;const a=document.createElement("div");a.textContent=`${e.speed} m/s`,n.appendChild(r),n.appendChild(a);const o=document.createElement("div");o.classList.add("deg-container");const i=new Image;i.src=s;const u=document.createElement("div");return u.textContent=`${e.deg}°`,o.appendChild(i),o.appendChild(u),t.appendChild(n),t.appendChild(o),t}(A)),m.appendChild(function(e){const t=document.createElement("div");t.classList.add("cloudiness-container");const n=new Image;n.src=f;const r=document.createElement("div");return r.classList.add("cloudiness"),r.textContent=`${e.cloudiness}%`,t.appendChild(n),t.appendChild(r),t}(C));const x=[{"0000":D},{"0600":P},{"0800":j},{"0700":O},{"0900":S},{1800:U},{1900:N},{2e3:Y}];document.body.style.backgroundImage=`url(${function(e,t){let n=E();t.forEach((e=>{n=n.insert(parseInt(Object.keys(e)[0]),Object.values(e)[0])}));const r=100*(0,k.utcToZonedTime)(Date.now()+1e3*e.timezone,"UTC").getHours();return n.le(r).value}(v,x)})`})).catch((e=>{document.querySelector('.location-form > input[type="text"]').value="Invalid location!"})).finally((()=>v.remove()))}(localStorage.getItem("location")?localStorage.getItem("location"):"Singapore")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,